import random
import time


def print_matrix(M, matr_name, tt):
    print("матрица " + matr_name + " промежуточное время = " + str(format(tt, '0.2f')) + " seconds.")
    for i in M:                                                                                                         # делаем перебор всех строк матрицы
        for j in i:                                                                                                     # перебираем все элементы в строке
            print("%5d" % j, end=' ')
        print()


print("\n-----Результат работы программы-------\n")
try:
    row_q = int(input("Введите количество строк (столбцов) квадратной матрицы в интервале от 6 до 100: "))
    while row_q < 6 or row_q > 100:
        row_q = int(input(
            "Вы ввели неверное число\nВведите количество строк (столбцов) квадратной матрицы в интервале от 6 до 100:"))
    K = int(input("Введите число К: "))
    start = time.time()
    A, F, FA, AT = [], [], [], []                                                                                       # задаем матрицы
    for i in range(row_q):
        A.append([0] * row_q)
        F.append([0] * row_q)
        FA.append([0] * row_q)
        AT.append([0] * row_q)
    time_next = time.time()
    print_matrix(F, "F", time_next - start)

    for i in range(row_q):                                                                                              # заполняем матрицу А
        for j in range(row_q):
            # A[i][j] = random.randint(-5,5)
            if i < j and j < row_q - 1 - i:
                A[i][j] = 1
            elif i < j and j > row_q - 1 - i:
                A[i][j] = 2
            elif i > j and j > row_q - 1 - i:
                A[i][j] = 3
            elif i > j and j < row_q - 1 - i:
                A[i][j] = 4

    time_prev = time_next
    time_next = time.time()
    print_matrix(A, "A", time_next - time_prev)
    for i in range(row_q):  # F
        for j in range(row_q):
            F[i][j] = A[i][j]
    time_prev = time_next
    time_next = time.time()
    print_matrix(F, "F", time_next - time_prev)

    C = []                                                                                                              # задаем матрицу C
    size = row_q // 2
    for i in range(size):
        C.append([0] * size)

    for i in range(size):                                                                                               # формируем подматрицу С
        for j in range(size):
            C[i][j] = F[size + row_q % 2 + i][size + row_q % 2 + j]
    time_prev = time_next
    time_next = time.time()
    print_matrix(C, "C", time_next - time_prev)

    count2 = 0
    count4 = 0
    for i in range(size):
        for j in range(i + 1, size, 1):
            if j % 2 == 0 and j < size - 1 - i and C[i][j] > 0:
                count2 += 1
            elif j % 2 == 1 and j < size - 1 - i and C[i][j] < 0:
                count4 += 1

    if count2 > count4:
        print("\nМеняем области 1 и 3 в подматрице С симметрично.\n ")
        for i in range(row_q // 2 + row_q % 2 + 1, row_q, 1):
            for j in range(row_q // 2 + row_q % 2 + 1, row_q, 1):
                if (i - row_q // 2 - row_q % 2) > (j - row_q // 2 - row_q % 2) and (i - row_q // 2 - row_q % 2) > row_q // 2 - (j - row_q // 2 - row_q % 2) - 1:
                    buffer = F[i][j]
                    F[i][j] = F[row_q // 2-i-1][j]
                    F[row_q // 2-i-1][j] = buffer


    # иначе С и Е поменять несимметрично
    else:
        print("\nМеняем матрицы С и Е несимметрично. \n")
        for j in range(row_q // 2):
            for i in range(row_q // 2):
                F[i][j], F[row_q // 2 + row_q % 2 + i][row_q // 2 + row_q % 2 + j] = F[row_q // 2 + row_q % 2 + i][row_q // 2 + row_q % 2 + j], F[i][j]


    time_prev = time_next
    time_next = time.time()
    print_matrix(F, "F (после преобразований)", time_next - time_prev)
    print_matrix(A, "A (после преобразований)", 0)

    # считаем пример (F+A)*(A^T)-K*F по действиям
    for i in range(row_q):  # F+A
        for j in range(row_q):
            s = 0
            for m in range(row_q):
                s = s + F[i][m] + A[m][j]
            FA[i][j] = s
    time_prev = time_next
    time_next = time.time()
    print_matrix(FA, "F+A", time_next - time_prev)

    for i in range(row_q):  # A^T
        for j in range(i, row_q, 1):
            AT[i][j], AT[j][i] = A[j][i], A[i][j]                                                                       #транспонирование
    time_prev = time_next
    time_next = time.time()
    print_matrix(AT, "A^T", time_next - time_prev)

    for i in range(row_q):  # K*F
        for j in range(row_q):
            A[i][j] = K * F[i][j]
    time_prev = time_next
    time_next = time.time()
    print_matrix(A, "K*F", time_next - time_prev)

    for i in range(row_q):  # (F+A)*(A^T)-(K*F)
        for j in range(row_q):
            FA[i][j] = FA[i][j]*AT[i][j] - A[i][j]
    time_prev = time_next
    time_next = time.time()
    print_matrix(FA, "(F+A)*(A^T)-(K*F)", time_next - time_prev)


    finish = time.time()
    result = finish - start
    print("Program time: " + str(result) + " seconds.")

except ValueError:
    print("\nэто не число")

except FileNotFoundError:
    print("\nФайл text.txt в директории проекта не обнаружен.\nДобавьте файл в директорию или переименуйте существующий *.txt файл.")
